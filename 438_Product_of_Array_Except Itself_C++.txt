//Problem: https://leetcode.com/problems/product-of-array-except-self/

//Sol 1:
// T(n) = O(n) SC=O(1) result array space is not counted

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n= nums.size();
        vector<int> result(n);

        int product = 1; //to keep track of right product

        //copy 1st element
        result[0]=nums[0];
       
        //find left product
        for(int i=1;i<n;i++)
            result[i] = nums[i] * result[i-1];
       

        //find output array  
        for(int i=n-1;i>0;i--)
        {
            result[i] =  result[i-1] * product;
            product  = product * nums[i];
        }
        //corner case
        result[0]= product;
        return result;    
    }
};



//.................................................................................................

//Sol 2:

// T(n) = O(n) SC=O(n) , 2 extra arrays used - left[] and right[]

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n= nums.size();
        vector<int> left(n),right(n),result(n);

        //copy elements
        left[0]=right[n-1]= 1;

        for(int i=1;i<n;i++)
            left[i] = nums[i-1] * left[i-1];
        for(int i=n-2;i>=0;i--)
            right[i] = nums[i+1] * right[i+1];

        //find output array

        for(int i=0;i<n;i++)
            result[i] = left[i] * right[i];
        return result;    
    }
};